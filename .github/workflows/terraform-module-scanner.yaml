# TERRAFORM MODULE SCANNER
# Version: 1.0.0
# Date: 2023-10-05
# Author: Neil Grinnall
#
# A GitHub Action for Terraform Modules
# - Runs 'terraform fmt'
# - Runs 'terraform validate'
# - Checks Code using TFLInt
# - Scans for security issues using CHECKOV
# - Creates/updates README.md using Terraform Docs
name: 'Terraform Module Scanner'

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'

jobs:


# TERRAFORM FMT & VALIDATE
# Set up the Terraform environment on the runner machine and
# validate the Terraform code to ensure that it is ready for 
# further deployment or management of infrastructure resources
#
# If the terraform validate command fails, subsequent steps in
# the workflow will not execute.

  terraform-fmt-validate:
    name: 'Terraform FMT & Validate'
    runs-on: ubuntu-latest
    
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    
  # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
  
  # Pull any changes down to the working directory      
    - name: Pull latest changes
      run: |
        git pull origin main
        
  # Install Terraform CLI on the runner machine
    - name: Setup Terraform on the runner
      uses: hashicorp/setup-terraform@v2.0.3

  # Initializes the Terraform working directory by downloading the required provider plugins and modules.
  # Configures the backend to store the Terraform state.
  # The -backend=false option disables the backend configuration and instructs Terraform to use a local backend.
  # The Terraform state will be stored on the runner machine where the workflow is executed.
  # Runs the fmt command to align the code correctly
  # Runs validate to check the code for syntax errors
    - name: Terraform init, fmt, & validate
      run: terraform init -backend=false; terraform fmt; terraform validate
      
  # Commit the results to a sub-folder in the repository
    - name: Commit any changes to this repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: '.'
        author_name: 'Neil Grinnall'
        message: 'Resulting from Terraform init, fmt, & validate'    

  # Push changes to the main branch.
  # Requires authentication, which is provided through a GITHUB_TOKEN 
  # environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

# TFLint
# Lint Terraform configurations using TFLint
  tflint:
    name: 'TFLint'
    runs-on: ubuntu-latest
    needs: [terraform-fmt-validate] # Ensure it runs after your other Terraform steps
    
    steps:
    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main

    # Cache TFLint plugins
    - uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    # Install TFLint
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: v0.44.1

    # Initialize TFLint plugins
    - name: Init TFLint
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Run TFLint and save results to a date-stamped file in the tflint/ directory
    - name: Run TFLint and save results
      run: |
        TIMESTAMP=$(date "+%Y%m%d-%H%M%S")
        tflint -f compact > tflint/tflint-results-$TIMESTAMP.txt
      working-directory: tflint

    # Commit the TFLint results to the repository
    - name: Commit TFLint results to the repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: './tflint/tflint-results-*.txt'
        author_name: 'terraform-module-scanner'
        message: 'TFLint results'


# CHECKOV SECURITY SCAN
# Run a security scan on the Terraform code using the Checkov tool.
# Commit the results to the repository.

  checkov-security-scan:
    name: 'Checkov Security Scan'
    runs-on: ubuntu-latest
    needs: [terraform-fmt-validate,TFLint]
    
  # Required to access the repository and perform Git operations.
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    
  # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
  
  # Pull any changes down to the working directory      
    - name: Pull latest changes
      run: |
        git pull origin main

  # Run a security scan on the Terraform code using the Checkov tool.
  # Generate a report of security issues that were found.
    - name: Run Checkov Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./
        framework: terraform
        output_format: cli
        output_file_path: ./checkov-security-scan
        soft_fail: 'true'
        skip_check: 'CKV_TF_1' # Skips failing on using ?ref=0.0.1 instead of commit hash as module source
        compact: 'true'

  # Add the Checkov scan report to the repository and commit it with a commit message.
  # This action requires authentication, which is provided through GITHUB_TOKEN.
    - name: Commit the results to this repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: './checkov-security-scan'
        author_name: 'Neil Grinnall'
        message: 'Checkov results'

  # Push changes to the main branch.
  # Requires authentication, which is provided through a GITHUB_TOKEN environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}


# TERRAFORM-DOCS
# Automatically generate and update documentation for Terraform
# modules in the README.md file, and push the changes back to 
# the pull request branch in GitHub.

  terraform-docs:
    name: 'Terraform Docs'
    runs-on: ubuntu-latest
    needs: checkov-security-scan
    
    steps:
    
  # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
  
  # Pull any changes down to the working directory      
    - name: Pull latest changes
      run: |
        git pull origin main

  # Render terraform docs inside the README.md and push changes back to PR branch
    - name: Create or update readm.md file
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: "true"
  
