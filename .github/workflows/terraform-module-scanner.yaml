# TERRAFORM MODULE SCANNER
# Version: 1.0.0
# Date: 2023-10-05
# Author: Neil Grinnall
#
# A GitHub Action for Terraform Modules
# - Runs 'terraform fmt'
# - Runs 'terraform validate'
# - Checks Code using TFLInt
# - Scans for security issues using CHECKOV
# - Creates/updates README.md using Terraform Docs
# - Sends a Slack message if any of the steps fail

name: 'Terraform Module Scanner'

# This workflow is triggered by manual dispatch, pull requests, and pushes to the 'main' branch.
# However, it ignores any changes made within the '.github/workflows/' directory.
on:
  # Allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch:
  
  # Triggers the workflow for any pull request.
  pull_request:
  
  # Triggers the workflow for pushes.
  push:
    # Specifies that the workflow should only run for pushes to the 'main' branch.
    branches:
      - main
      
    # Exclude paths: The workflow won't run if only these paths are modified in a push.
    paths-ignore:
      - '.github/workflows/**'

env:
  SLACK_CHANNEL_ID: 'C060DK2BWQM' # Define the Slack channel ID here
# ${{ secrets.GITHUB_TOKEN }} is an automatically generated secret provided by GitHub for use in GitHub Actions.

jobs:

#### ------------------------------------------ ###
## TERRAFORM FMT & VALIDATE
#### ------------------------------------------ ###
## Set up the Terraform environment on the runner machine and
## validate the Terraform code to ensure that it is ready for 
## further deployment or management of infrastructure resources
##
## If the terraform validate command fails, subsequent steps in
## the workflow will not execute.
#
## Job definition for running Terraform formatting and validation checks.
#  terraform-fmt-validate:
#    name: 'Terraform FMT & Validate'
#    runs-on: ubuntu-latest
#    env:
#    # Provide the GitHub token to allow access to repository-related functionalities.
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#    steps:
#    
#  ## Check out the code to the runner environment where the workflow is running
#    - name: Checkout the repository
#      uses: actions/checkout@v3
#      with:
#        ref: main
#  
#  ## Pull any changes down to the working directory      
#    - name: Pull latest changes
#      run: git pull origin main
#        
#  ## Install Terraform CLI on the runner machine
#    - name: Setup Terraform on the runner
#      uses: hashicorp/setup-terraform@v2.0.3
#
## This step is responsible for initializing, formatting, and validating the Terraform code.
## 
## 1. `terraform init -backend=false`: 
##    - Initializes the Terraform working directory.
##    - Downloads the required provider plugins.
##    - The `-backend=false` option disables backend configuration, which means Terraform will use a local backend.
##      This means the Terraform state will be stored on the runner machine where the workflow is executed.
##
## 2. `terraform fmt`: 
##    - Automatically formats the Terraform code to adhere to a canonical format and style.
##
## 3. `terraform validate`: 
##    - Validates the Terraform code's syntax and checks for any errors.
#    - name: Terraform init, fmt, & validate
#      run: |
#        terraform init -backend=false; terraform fmt; terraform validate
#        
#  ## Commit the results to a sub-folder in the repository
#    - name: Commit any changes to this repository
#      uses: EndBug/add-and-commit@v9.1.1
#      with:
#        add: '.'
#        author_name: 'GitHub Action - terraform-module-scanner'
#        message: 'Resulting from Terraform init, fmt, & validate'    
#
#  ## Push changes to the main branch.
#  ## Requires authentication, which is provided through a GITHUB_TOKEN 
#  ## environment variable.
#    - name: Push changes to main branch
#      uses: ad-m/github-push-action@master
#      with:
#        branch: main
#        directory: ./
#        github_token: ${{ env.GITHUB_TOKEN }}
#
#### ------------------------------------------ ###
## TFLint
#### ------------------------------------------ ###
## Lint Terraform configurations using TFLint
#  tflint:
#    name: 'TFLint'
#    runs-on: ubuntu-latest
#    env:
#    # Provide the GitHub token to allow access to repository-related functionalities.
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    needs: [terraform-fmt-validate]
#
#    steps:
#
#    # Check out the code to the runner environment where the workflow is running
#    - name: Checkout the repository
#      uses: actions/checkout@v3
#      with:
#        ref: main
#    
#    ## Pull any changes down to the working directory      
#    - name: Pull latest changes
#      run: git pull origin main
#
#    # Caching TFLint plugins to optimize workflow execution time.
#    # This action leverages GitHub's caching infrastructure to store and retrieve TFLint plugins.
#    # The cache is not stored on the ephemeral runner but in GitHub's centralized cache storage.
#    # The key for the cache is constructed using the runner's OS and a hash of the '.tflint.hcl' file.
#    # A change in the '.tflint.hcl' file will generate a new cache, ensuring relevant plugins are used.
#    - name: Setup TFLint cache
#      uses: actions/cache@v3
#      with:
#        path: ~/.tflint.d/plugins
#        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
#
#    # Set up and install the specified version of TFLint
#    - name: Install TFLint v0.44.1
#      uses: terraform-linters/setup-tflint@v3
#      with:
#        tflint_version: v0.44.1
#
#    # Set up TFLint plugins using the provided configuration file.
#    # The '--init' flag initializes the plugins, and the '--config' flag specifies the configuration file path.
#    # The tflint.hcl patch is relative to the repository where the action is run
#    # The tflint.hcl file can be changed according to what you're linting
#    # By default it'll have the azure and aws libraries
#    - name: Initialize TFLint Plugins
#      run: tflint --init --config ./tflint/tflint.hcl
#      env:
#        # Provide the GitHub token to allow TFLint to access any required GitHub resources.
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#    # Execute TFLint and store the results in a timestamped file within the 'tflint' directory.
#    - name: Execute TFLint and Store Results
#    # Uncomment the line below if you want the workflow to continue even if this step encounters an error.
#      #continue-on-error: true
#  
#      run: |
#        # Execute TFLint without output redirection to display potential error messages directly in the workflow logs.
#        tflint -f compact --config ./tflint/tflint.hcl || true
#          
#        # Capture the current date and time to create a unique timestamp for the results file.
#        TIMESTAMP=$(date "+%Y%m%d-%H%M%S")
#        
#        # Run TFLint again and redirect its output to a timestamped file in the 'tflint' directory.
#        tflint -f compact --config ./tflint/tflint.hcl > tflint/tflint-results-$TIMESTAMP.txt
#
#    # Commit the TFLint results file(s) to the repository.
#    # This step uses the 'EndBug/add-and-commit' action to automatically add and commit the generated TFLint results.
#    - name: Commit TFLint Results
#      uses: EndBug/add-and-commit@v9.1.1
#      with:
#        # Specify the path pattern to the TFLint results files that need to be added to the commit.
#        add: './tflint/tflint-results-*.txt'
#        author_name: 'GitHub Action - terraform-module-scanner'
#        message: 'Resulting from TFLint'    
#  
#  ## Push changes to the main branch.
#  ## Requires authentication, which is provided through a GITHUB_TOKEN 
#  ## environment variable.
#    - name: Push changes to main branch
#      uses: ad-m/github-push-action@master
#      with:
#        branch: main
#        directory: ./
#        github_token: ${{ env.GITHUB_TOKEN }}
#
#### ------------------------------------------ ###
## CHECKOV SECURITY SCAN
#### ------------------------------------------ ###
## Run a security scan on the Terraform code using the Checkov tool.
## Commit the results to the repository.
#
#  checkov-security-scan:
#    name: 'Checkov Security Scan'
#    runs-on: ubuntu-latest
#    env:
#    # Provide the GitHub token to allow access to repository-related functionalities.
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    needs: [terraform-fmt-validate,TFLint]
#
#    steps:
#    
#    # Check out the code to the runner environment where the workflow is running
#    - name: Checkout the repository
#      uses: actions/checkout@v3
#      with:
#        ref: main
#    
#    ## Pull any changes down to the working directory      
#    - name: Pull latest changes
#      run: git pull origin main
#
#    # Ensure the 'checkov' directory exists
#    - name: Manage 'checkov' directory
#      run: mkdir -p checkov
#
#    # Generate the timestamped file path for the Checkov scan results
#    - name: Generate Checkov output file path
#      run: echo "CHECKOV_OUTPUT_FILE=./checkov/checkov-security-scan-$(date "+%Y%m%d-%H%M%S")" >> $GITHUB_ENV
#
## Run a security scan on the Terraform code using the Checkov tool.
## Generate a report of security issues that were found.
#    - name: Run Checkov Scan
#      uses: bridgecrewio/checkov-action@master
#      with:
#        directory: ./
#        framework: terraform
#        output_format: cli
#        output_file_path: ${{ env.CHECKOV_OUTPUT_FILE }}
#        soft_fail: 'true'
#        skip_check: 'CKV_TF_1' # Skips failing on using ?ref=0.0.1 instead of commit hash as module source
#        compact: 'true'
#
## Add the Checkov scan report to the repository and commit it with a commit message.
## This action requires authentication, which is provided through GITHUB_TOKEN.
#    - name: Commit the results
#      uses: EndBug/add-and-commit@v9.1.1
#      with:
#        add: './checkov/checkov-security-scan-*.txt'
#        author_name: 'GitHub Action - terraform-module-scanner'
#        message: 'Resulting from checkov'    
#
#  ## Push changes to the main branch.
#  ## Requires authentication, which is provided through a GITHUB_TOKEN 
#  ## environment variable.
#    - name: Push changes to main branch
#      uses: ad-m/github-push-action@master
#      with:
#        branch: main
#        directory: ./
#        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# TERRAFORM-DOCS
### ------------------------------------------ ###
# Automatically generate and update documentation for Terraform
# modules in the README.md file, and push the changes back to 
# the pull request branch in GitHub.

  terraform-docs:
    name: 'Terraform Docs'
    runs-on: ubuntu-latest
    env:
    # Provide the GitHub token to allow access to repository-related functionalities.
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #needs: tflint
    
    steps:
    
    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
    
    ## Pull any changes down to the working directory      
    - name: Pull latest changes
      run: git pull origin main

    ## Use the 'terraform-docs' GitHub Action to automatically generate and insert Terraform documentation
    ## into the README.md file.
    ## Once the documentation is updated, the changes are pushed back to the pull request branch.
    #- name: Generate and Update Terraform Documentation in README.md
    #  uses: terraform-docs/gh-actions@v1.0.0
    #  with:
    #    # Specify the configuration file for 'terraform-docs'
    #    config-file: ./terraform-docs/terraform-docs.yml
    #    # Enable pushing the updated README.md back to the pull request branch
    #    git-push: "true"

    ## Pull any changes down to the working directory      
    - name: Pull latest changes
      run: git pull origin main

    # Fetch all tags from the remote repository.
    # This ensures that the local repository has an up-to-date list of all tags available in the remote.
    - name: Fetch All Tags from Remote
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    
    # Retrieve the latest tag from the git history.
    # This step uses the 'git describe' command to identify the most recent tag and sets it as an output
    # variable for subsequent steps.
    - name: Retrieve Latest Git Tag
      id: latesttag
      run: echo ::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))

    # Update the README.md file to reflect the latest git tag.
    # This step uses the 'sed' command to search for the badge URL pattern in the README.md and replaces
    # it with the latest tag obtained from the previous step.
    - name: Update Badge in readme with Git Tag
      run: |
        sed -i "s/\(https:\/\/img.shields.io\/badge\/Tag\)-.*-blue/\1-${{ steps.latesttag.outputs.tag }}-blue/" README.md

    # Update the title of README.md with the repository's name and the latest git tag.
    # This step retrieves the repository name using git commands and then uses 'sed' to replace the 
    # placeholder '[REPO_NAME]' in the README.md with the actual repository name.
    - name: Set readme title with repository name
      run: |
        # Extract the repository name from the git URL
        REPO_NAME=$(basename `git rev-parse --show-toplevel`)
    
        # Replace the placeholder '[REPO_NAME]' in README.md with the actual repository name
        sed -i "s/\[REPO_NAME\]/$REPO_NAME/" README.md

    - name: Commit changes
      run: |
        git add README.md
        git commit -m "Update README.md with latest tag and repo name"

    # Push changes to the main branch.
    # Requires authentication, which is provided through a GITHUB_TOKEN 
    # environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}


#
#### ------------------------------------------ ###
## NOTIFY SLACK
#### ------------------------------------------ ###
#
#  # Job to notify a Slack channel in case of any failure in the specified jobs.
#  notify-slack-on-failure:
#    name: 'Notify Slack on Any Failure'
#    runs-on: ubuntu-latest
#    
#    # This job will only execute if any of the specified jobs fail.
#    if: failure()
#    
#    # Dependencies: This job depends on the completion of the following jobs.
#    needs: [terraform-fmt-validate, tflint, checkov-security-scan, terraform-docs]
#    
#    steps:
#    - name: Send Failure Notification to Slack
#      uses: slackapi/slack-github-action@v1.24.0
#      with:
#        channel-id: ${{ env.SLACK_CHANNEL_ID }}
#        payload: |
#          {
#            "text": ":boom: Error in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }} \n\n:clipboard:Check the GitHub Action logs for detailed results",
#            
#            "blocks": [
#              {
#                "type": "section",
#                "text": {
#                  "type": "mrkdwn",
#                  "text": ":boom: Error in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }} \n\n:clipboard:Check the GitHub Action logs for detailed results"
#                }
#              },
#              {
#                "type": "actions",
#                "elements": [
#                  {
#                    "type": "button",
#                    "text": {
#                      "type": "plain_text",
#                      "text": ":github: View Action"
#                    },
#                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#                  }
#                ]
#              }
#            ]
#          }
#      env:
#        # Slack webhook URL for sending notifications.
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
#        
#        # Specify the type of Slack webhook being used.
#        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#
#  # Job to notify a Slack channel in case of any failure in the specified jobs.
#  notify-slack-on-success:
#    name: 'Notify Slack on Total Success'
#    runs-on: ubuntu-latest
#    
#    # This job will only execute if any of the specified jobs fail.
#    if: success()
#    
#    # Dependencies: This job depends on the completion of the following jobs.
#    needs: [terraform-fmt-validate, tflint, checkov-security-scan, terraform-docs]
#    
#    steps:
#    - name: Send Success Notification to Slack
#      uses: slackapi/slack-github-action@v1.24.0
#      with:
#        channel-id: ${{ env.SLACK_CHANNEL_ID }}
#        payload: |
#          {
#            "text": ":white_check_mark: Success in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }}",
#
#            "blocks": [
#              {
#                "type": "section",
#                "text": {
#                  "type": "mrkdwn",
#                  "text": ":white_check_mark: Success in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }}"
#                }
#              },
#              {
#                "type": "actions",
#                "elements": [
#                  {
#                    "type": "button",
#                    "text": {
#                      "type": "plain_text",
#                      "text": ":github: View Action"
#                    },
#                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#                  }
#                ]
#              }
#            ]
#          }
#      env:
#        # Slack webhook URL for sending notifications.
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
#        
#        # Specify the type of Slack webhook being used.
#        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#
