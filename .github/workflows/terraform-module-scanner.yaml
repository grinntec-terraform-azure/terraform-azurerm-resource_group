# TERRAFORM MODULE SCANNER
# Version: 1.0.0
# Date: 2023-10-05
# Author: Neil Grinnall
#
# A GitHub Action for Terraform Modules
# - Runs 'terraform fmt'
# - Runs 'terraform validate'
# - Checks Code using TFLInt
# - Scans for security issues using CHECKOV
# - Creates/updates README.md using Terraform Docs
# - Sends a Slack message if any of the steps fail or if successful

name: 'Terraform Module Scanner'

# This workflow is triggered by manual dispatch, pull requests, and pushes to the 'main' branch.
# However, it ignores any changes made within the '.github/workflows/' directory.
on:
  # Allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch:
  
  # Triggers the workflow for any pull request.
  pull_request:
  
  # Triggers the workflow for pushes.
  push:
    # Specifies that the workflow should only run for pushes to the 'main' branch.
    branches:
      - main
      
    # Exclude paths: The workflow won't run if only these paths are modified in a push.
    #paths-ignore:
    #  - '.github/workflows/**'

env:
  SLACK_CHANNEL_ID: 'C060DK2BWQM' # Define the Slack channel ID here
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # An automatically generated secret provided by GitHub for use in GitHub Actions.

jobs:

#### ------------------------------------------ ###
## TERRAFORM FMT & VALIDATE
#### ------------------------------------------ ###
# This step is responsible for initializing, formatting, and validating the Terraform code.
# 
# 1. `terraform init -backend=false`: 
#    - Initializes the Terraform working directory.
#    - Downloads the required provider plugins.
#    - The `-backend=false` option disables backend configuration, which means Terraform will use a local backend.
#      This means the Terraform state will be stored on the runner machine where the workflow is executed.
#
# 2. `terraform fmt`: 
#    - Automatically formats the Terraform code to adhere to a canonical format and style.
#
# 3. `terraform validate`: 
#    - Validates the Terraform code's syntax and checks for any errors.
# If the terraform validate command fails, subsequent steps in the workflow will not execute.

#  terraform-fmt-validate:
#    name: 'Terraform FMT & Validate'
#    runs-on: ubuntu-latest
#    steps:
#    
#    - name: Checkout the repository
#      uses: actions/checkout@v3
#      with:
#        ref: main
#         
#    - name: Setup Terraform on the runner
#      uses: hashicorp/setup-terraform@v2.0.3
#
#    - name: Terraform init, fmt, & validate - module
#      run: |
#        terraform init -backend=false
#        terraform fmt
#        terraform validate
#
#    - name: Terraform init, fmt, & validate - ./example/main.tf
#      run: |
#        cd ./example
#        terraform init -backend=false
#        terraform fmt
#        terraform validate
#        
#    - name: Commit any changes to this repository
#      uses: EndBug/add-and-commit@v9.1.1
#      with:
#        add: '.'
#        author_name: 'GitHub Action - terraform-module-scanner'
#        message: 'TERRAFORM FMT & VALIDATE'    
#
#    - name: Push changes to main branch
#      uses: ad-m/github-push-action@master
#      with:
#        branch: main
#        directory: ./
#        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# TFLint
### ------------------------------------------ ###
# Lint Terraform configurations using TFLint
  tflint:
    name: 'TFLint'
    runs-on: ubuntu-latest
    #needs: [terraform-fmt-validate]
    steps:

    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main

    # Caching TFLint plugins to optimize workflow execution time.
    # This action leverages GitHub's caching infrastructure to store and retrieve TFLint plugins.
    # The cache is not stored on the ephemeral runner but in GitHub's centralized cache storage.
    # The key for the cache is constructed using the runner's OS and a hash of the '.tflint.hcl' file.
    # A change in the '.tflint.hcl' file will generate a new cache, ensuring relevant plugins are used.
    - name: Setup TFLint cache
      uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    # Set up and install the specified version of TFLint
    - name: Install TFLint v0.44.1
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: v0.44.1

    # Set up TFLint plugins using the provided configuration file.
    # The '--init' flag initializes the plugins, and the '--config' flag specifies the configuration file path.
    # The tflint.hcl patch is relative to the repository where the action is run
    # The tflint.hcl file can be changed according to what you're linting
    # By default it'll have the azure and aws libraries
    - name: Initialize TFLint Plugins
      run: tflint --init --config ./tflint/tflint.hcl

    - name: Execute TFLint and Store Results - module
      continue-on-error: true
      run: |
        tflint --format default > "./tflint/tflint-results-module.txt" 2>&1

    # tflint --config ./tflint/tflint-module.hcl > ./tflint/tflint-results-module.txt

    # Execute TFLint and store the results in a timestamped file within the 'tflint' directory.
    - name: Execute TFLint and Store Results - example
    # Uncomment the line below if you want the workflow to continue even if this step encounters an error.
      continue-on-error: true
      run: |
        cd ./example
        tflint --format default > ../tflint/tflint-results-example.txt

    # List the contents of the 'tflint' directory to debug and check if .txt files are generated.
    - name: List 'tflint' directory contents
      run: |
        ls -l ./tflint

    # Check if there are changes in the 'tflint' directory before committing.
    - name: Check for changes in 'tflint' directory
      id: check_changes
      run: |
        cd ./tflint
        if git status --porcelain | grep -q .; then
          echo "Changes found in 'tflint' directory."
          echo "::set-output name=changes::true"
        else
          echo "No changes found in 'tflint' directory."
          echo "::set-output name=changes::false"
        fi

    # Commit the TFLint results file(s) to the repository only if changes were found.
    - name: Commit TFLint Results
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        cd ./tflint
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Action - terraform-module-scanner"
        git add .
        git commit -m "Resulting from TFLint"
        git push

#    # Commit the TFLint results file(s) to the repository.
#    # This step uses the 'EndBug/add-and-commit' action to automatically add and commit the generated TFLint results.
#    - name: Commit TFLint Results
#      uses: EndBug/add-and-commit@v9.1.1
#      with:
#        # Specify the path pattern to the TFLint results files that need to be added to the commit.
#        add: ./tflint
#        author_name: 'GitHub Action - terraform-module-scanner'
#        message: 'Resulting from TFLint'    
#  
#    ## Push changes to the main branch.
#    ## Requires authentication, which is provided through a GITHUB_TOKEN 
#    ## environment variable.
#    - name: Push changes to main branch
#      uses: ad-m/github-push-action@master
#      with:
#        branch: main
#        directory: ./tflint
#        github_token: ${{ env.GITHUB_TOKEN }}
#
#