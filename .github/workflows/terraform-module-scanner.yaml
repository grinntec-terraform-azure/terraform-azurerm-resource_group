# TERRAFORM MODULE SCANNER
# Version: 1.0.0
# Date: 2023-10-05
# Author: Neil Grinnall
#
# A GitHub Action for Terraform Modules
# - Runs 'terraform fmt'
# - Runs 'terraform validate'
# - Checks Code using TFLInt
# - Scans for security issues using CHECKOV
# - Creates/updates README.md using Terraform Docs
name: 'Terraform Module Scanner'

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'

env:
  SLACK_CHANNEL_ID: 'C060DK2BWQM' # Define the Slack channel ID here

jobs:

### ------------------------------------------ ###
# TERRAFORM FMT & VALIDATE
### ------------------------------------------ ###
# Set up the Terraform environment on the runner machine and
# validate the Terraform code to ensure that it is ready for 
# further deployment or management of infrastructure resources
#
# If the terraform validate command fails, subsequent steps in
# the workflow will not execute.

  terraform-fmt-validate:
    name: 'Terraform FMT & Validate'
    runs-on: ubuntu-latest
    
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    
  ## Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
  
  ## Pull any changes down to the working directory      
    - name: Pull latest changes
      run: git pull origin main
        
  ## Install Terraform CLI on the runner machine
    - name: Setup Terraform on the runner
      uses: hashicorp/setup-terraform@v2.0.3

# This step is responsible for initializing, formatting, and validating the Terraform code.
# 
# 1. `terraform init -backend=false`: 
#    - Initializes the Terraform working directory.
#    - Downloads the required provider plugins.
#    - The `-backend=false` option disables backend configuration, which means Terraform will use a local backend.
#      This means the Terraform state will be stored on the runner machine where the workflow is executed.
#
# 2. `terraform fmt`: 
#    - Automatically formats the Terraform code to adhere to a canonical format and style.
#
# 3. `terraform validate`: 
#    - Validates the Terraform code's syntax and checks for any errors.
# 
# After running the above commands, the script checks the exit status using `$?`:
#    - If the exit status is not 0 (indicating an error), it sets an environment variable `FAILED_STEP` with the value "Terraform init, fmt, & validate".
#      This can be used later in the workflow to identify which step failed.
#    - It also sets an output variable `failed` to `true`, which can be used in subsequent steps or jobs.
# 
#    - If the exit status is 0 (indicating success), it sets the output variable `failed` to `false`.
#
# The step is given an identifier `terraform_check` so it can be referred to in other parts of the workflow.
    - name: Terraform init, fmt, & validate
      run: |
        terraform init -backend=false; terraform fmt; terraform validate
        if [ $? -ne 0 ]; then
          echo "FAILED_STEP=Terraform init, fmt, & validate" >> $GITHUB_ENV
          echo "::set-output name=failed_step::Terraform init, fmt, & validate"
          echo "::set-output name=failed::true"
        else
          echo "::set-output name=failed::false"
        fi
      id: terraform_check

  ## Commit the results to a sub-folder in the repository
    - name: Commit any changes to this repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: '.'
        author_name: 'GitHub Action - terraform-module-scanner'
        message: 'Resulting from Terraform init, fmt, & validate'    

  ## Push changes to the main branch.
  ## Requires authentication, which is provided through a GITHUB_TOKEN 
  ## environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# TFLint
### ------------------------------------------ ###
# Lint Terraform configurations using TFLint
  tflint:
    name: 'TFLint'
    runs-on: ubuntu-latest
    needs: [terraform-fmt-validate] # Ensure it runs after your other Terraform steps
    
    steps:
    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main

  # Cache TFLint plugins
    - uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

  # Install TFLint
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: v0.44.1

    # Initialize TFLint plugins
    - name: Init TFLint
      run: tflint --init --config ./tflint/tflint.hcl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Ensure the tflint/ directory exists
    - name: Create tflint directory if it doesn't exist
      run: mkdir -p tflint

    # Run TFLint and save results to a date-stamped file in the tflint/ directory
    - name: Run TFLint and save results
      continue-on-error: true
      run: |
        # Run tflint without redirection to see any error messages
        tflint -f compact --config ./tflint/tflint.hcl || true
      
        # If the above command succeeds, then save the results to a file
        TIMESTAMP=$(date "+%Y%m%d-%H%M%S")
        tflint -f compact --config ./tflint/tflint.hcl > tflint/tflint-results-$TIMESTAMP.txt

  # Commit the TFLint results to the repository
    - name: Commit TFLint results to the repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: './tflint/tflint-results-*.txt'
        author_name: 'terraform-module-scanner'
        message: 'TFLint results'

### ------------------------------------------ ###
# CHECKOV SECURITY SCAN
### ------------------------------------------ ###
# Run a security scan on the Terraform code using the Checkov tool.
# Commit the results to the repository.

  checkov-security-scan:
    name: 'Checkov Security Scan'
    runs-on: ubuntu-latest
    needs: [terraform-fmt-validate,TFLint]
#    
# Required to access the repository and perform Git operations.
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    
# Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
  
# Pull any changes down to the working directory      
    - name: Pull latest changes
      run: |
        git pull origin main

# Ensure the checkov/ directory exists
    - name: Create checkov directory if it doesn't exist
      run: mkdir -p checkov

# Generate the timestamped file path for the Checkov scan results
    - name: Generate Checkov output file path
      run: echo "CHECKOV_OUTPUT_FILE=./checkov/checkov-security-scan-$(date "+%Y%m%d-%H%M%S")" >> $GITHUB_ENV

# Run a security scan on the Terraform code using the Checkov tool.
# Generate a report of security issues that were found.
    - name: Run Checkov Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./
        framework: terraform
        output_format: cli
        output_file_path: ${{ env.CHECKOV_OUTPUT_FILE }}
        soft_fail: 'true'
        skip_check: 'CKV_TF_1' # Skips failing on using ?ref=0.0.1 instead of commit hash as module source
        compact: 'true'

# Add the Checkov scan report to the repository and commit it with a commit message.
# This action requires authentication, which is provided through GITHUB_TOKEN.
    - name: Commit the results to this repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: './checkov/checkov-security-scan-*.txt'
        author_name: 'Neil Grinnall'
        message: 'Checkov results'

# Push changes to the main branch.
# Requires authentication, which is provided through a GITHUB_TOKEN environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# TERRAFORM-DOCS
### ------------------------------------------ ###
# Automatically generate and update documentation for Terraform
# modules in the README.md file, and push the changes back to 
# the pull request branch in GitHub.

  terraform-docs:
    name: 'Terraform Docs'
    runs-on: ubuntu-latest
    needs: checkov-security-scan
    
    steps:
    
  # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
  
  # Pull any changes down to the working directory      
    - name: Pull latest changes
      run: |
        git pull origin main

    - name: Fetch all tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    
    - name: Get latest tag
      id: latesttag
      run: echo ::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))
    
    - name: Update README.md
      run: |
       sed -i "s/\(https:\/\/img.shields.io\/badge\/Tag\)-.*-blue/\1-${{ steps.latesttag.outputs.tag }}-blue/" README.md

    # Update README.md title with repository name and latest tag
    - name: Update README.md title
      run: |
        REPO_NAME=$(basename `git rev-parse --show-toplevel`)
        sed -i "s/\[REPO_NAME\]/$REPO_NAME/" README.md

  # Render terraform docs inside the README.md and push changes back to PR branch
    - name: Create or update readme.md file
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        config-file: ./terraform-docs/terraform-docs.yml
        git-push: "true"

### ------------------------------------------ ###
# NOTIFY SLACK ON ANY FAILURE
### ------------------------------------------ ###

  notify-slack-on-failure:
    name: 'Notify Slack on Any Failure'
    runs-on: ubuntu-latest
    if: failure() # This ensures the job runs only if any previous job fails
    needs: [terraform-fmt-validate, tflint, checkov-security-scan, terraform-docs] # List all jobs here
    steps:
    - name: Notify Slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ env.SLACK_CHANNEL_ID }}
        payload: |
          {
            "text": ":boom:${{ needs.terraform-fmt-validate.outputs.failed_step }} \n\n :boom:Error in workflow: ${{ github.workflow }} \n\nFailed Step: ${{ needs.terraform-fmt-validate.outputs.failed_step }} \n\nRepository::file_folder:${{ github.repository }} \n\n:clipboard:Check the GitHub Action logs for detailed results.",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":boom:${{ needs.terraform-fmt-validate.outputs.failed_step }} \n\n :boom:Error in workflow: ${{ github.workflow }} \n\nFailed Step: ${{ needs.terraform-fmt-validate.outputs.failed_step }} \n\nRepository::file_folder:${{ github.repository }} \n\n:clipboard:Check the GitHub Action logs for detailed results."
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":github: View Action"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
