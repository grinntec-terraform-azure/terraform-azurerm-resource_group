# TERRAFORM MODULE SCANNER
# Version: 1.0.0
# Date: 2023-10-05
# Author: Neil Grinnall
#
# A GitHub Action for Terraform Modules
# - Runs 'terraform fmt'
# - Runs 'terraform validate'
# - Checks Code using TFLInt
# - Scans for security issues using CHECKOV
# - Creates/updates README.md using Terraform Docs
# - Sends a Slack message if any of the steps fail

name: 'Terraform Module Scanner'

# This workflow is triggered by manual dispatch, pull requests, and pushes to the 'main' branch.
# However, it ignores any changes made within the '.github/workflows/' directory.
on:
  # Allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch:
  
  # Triggers the workflow for any pull request.
  pull_request:
  
  # Triggers the workflow for pushes.
  push:
    # Specifies that the workflow should only run for pushes to the 'main' branch.
    branches:
      - main
      
    # Exclude paths: The workflow won't run if only these paths are modified in a push.
    #paths-ignore:
    #  - '.github/workflows/**'

env:
  SLACK_CHANNEL_ID: 'C060DK2BWQM' # Define the Slack channel ID here
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # An automatically generated secret provided by GitHub for use in GitHub Actions.

jobs:

#### ------------------------------------------ ###
## TERRAFORM FMT & VALIDATE
#### ------------------------------------------ ###
# Set up the Terraform environment on the runner machine and validate the Terraform code to ensure that it is ready for 
# further deployment or management of infrastructure resources.
#
# If the terraform validate command fails, subsequent steps in the workflow will not execute.

# Job definition for running Terraform formatting and validation checks.
  terraform-fmt-validate:
    name: 'Terraform FMT & Validate'
    runs-on: ubuntu-latest
    steps:
    
  ## Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
         
  ## Install Terraform CLI on the runner machine
    - name: Setup Terraform on the runner
      uses: hashicorp/setup-terraform@v2.0.3

# This step is responsible for initializing, formatting, and validating the Terraform code.
# 
# 1. `terraform init -backend=false`: 
#    - Initializes the Terraform working directory.
#    - Downloads the required provider plugins.
#    - The `-backend=false` option disables backend configuration, which means Terraform will use a local backend.
#      This means the Terraform state will be stored on the runner machine where the workflow is executed.
#
# 2. `terraform fmt`: 
#    - Automatically formats the Terraform code to adhere to a canonical format and style.
#
# 3. `terraform validate`: 
#    - Validates the Terraform code's syntax and checks for any errors.
    - name: Terraform init, fmt, & validate
      run: |
        terraform init -backend=false
        terraform fmt
        terraform validate
        
    ## Commit the results to a sub-folder in the repository
    - name: Commit any changes to this repository
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: '.'
        author_name: 'GitHub Action - terraform-module-scanner'
        message: 'TERRAFORM FMT & VALIDATE'    

    ## Push changes to the main branch.
    ## Requires authentication, which is provided through a GITHUB_TOKEN 
    ## environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# TFLint
### ------------------------------------------ ###
# Lint Terraform configurations using TFLint
  tflint:
    name: 'TFLint'
    runs-on: ubuntu-latest
    needs: [terraform-fmt-validate]
    steps:

    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main

    # Caching TFLint plugins to optimize workflow execution time.
    # This action leverages GitHub's caching infrastructure to store and retrieve TFLint plugins.
    # The cache is not stored on the ephemeral runner but in GitHub's centralized cache storage.
    # The key for the cache is constructed using the runner's OS and a hash of the '.tflint.hcl' file.
    # A change in the '.tflint.hcl' file will generate a new cache, ensuring relevant plugins are used.
    - name: Setup TFLint cache
      uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    # Set up and install the specified version of TFLint
    - name: Install TFLint v0.44.1
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: v0.44.1

    # Set up TFLint plugins using the provided configuration file.
    # The '--init' flag initializes the plugins, and the '--config' flag specifies the configuration file path.
    # The tflint.hcl patch is relative to the repository where the action is run
    # The tflint.hcl file can be changed according to what you're linting
    # By default it'll have the azure and aws libraries
    - name: Initialize TFLint Plugins
      run: tflint --init --config ./tflint/tflint.hcl

    # Execute TFLint and store the results in a timestamped file within the 'tflint' directory.
    - name: Execute TFLint and Store Results
    # Uncomment the line below if you want the workflow to continue even if this step encounters an error.
      #continue-on-error: true

      # Run TFLint again and redirect its output to a timestamped file in the 'tflint' directory.  
      run: tflint -f compact --config ./tflint/tflint.hcl > tflint/tflint-results.txt

    # Commit the TFLint results file(s) to the repository.
    # This step uses the 'EndBug/add-and-commit' action to automatically add and commit the generated TFLint results.
    - name: Commit TFLint Results
      uses: EndBug/add-and-commit@v9.1.1
      with:
        # Specify the path pattern to the TFLint results files that need to be added to the commit.
        add: './tflint/*'
        author_name: 'GitHub Action - terraform-module-scanner'
        message: 'Resulting from TFLint'    
  
    ## Push changes to the main branch.
    ## Requires authentication, which is provided through a GITHUB_TOKEN 
    ## environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# CHECKOV SECURITY SCAN - MODULE
### ------------------------------------------ ###
# Run a security scan on the Terraform code using the Checkov tool.
# Commit the results to the repository.

  checkov-security-scan-module:
    name: 'Checkov Security Scan - Module'
    runs-on: ubuntu-latest
    needs: [tflint]
    steps:
    
    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main
    
    ## Pull any changes down to the working directory      
    - name: Pull latest changes
      run: git pull origin main

    # Run a security scan on the Terraform code using the Checkov tool.
    # Generate a report of security issues that were found.
    - name: Run Checkov Scan
      uses: bridgecrewio/checkov-action@master
      with:
        file: ./main.tf
        output_format: cli # Report output format
        output_file_path: './checkov-security-scan/module/' # Name of the output folder to save the chosen output formats
        framework: terraform # Filter scan to run only on specific infrastructure code frameworks
        soft_fail: 'true' # Runs checks but always returns a 0 exit code    

     # Strip out ANSI codes from the Checkov scan results
    - name: Clean Checkov Output
      run: sed -i 's/\x1b\[[0-9;]*m//g' ./checkov-security-scan/module/results_cli.txt

    # Run a security scan on the Terraform code using the Checkov tool.
    # Generate a report of security issues that were found.
    - name: Run Checkov Scan
      uses: bridgecrewio/checkov-action@master
      with:
        file: ./example/main.tf
        output_format: cli # Report output format
        output_file_path: './checkov-security-scan/example/' # Name of the output folder to save the chosen output formats
        framework: terraform # Filter scan to run only on specific infrastructure code frameworks
        soft_fail: 'true' # Runs checks but always returns a 0 exit code    

     # Strip out ANSI codes from the Checkov scan results
    - name: Clean Checkov Output
      run: sed -i 's/\x1b\[[0-9;]*m//g' ./checkov-security-scan/example/results_cli.txt

# Add the Checkov scan report to the repository and commit it with a commit message.
# This action requires authentication, which is provided through GITHUB_TOKEN.
    - name: Commit the results
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: './checkov-security-scan/*'
        author_name: 'GitHub Action - terraform-module-scanner'
        message: 'CHECKOV SECURITY SCAN - MODULE'    

  ## Push changes to the main branch.
  ## Requires authentication, which is provided through a GITHUB_TOKEN 
  ## environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# CHECKOV SECURITY SCAN - EXAMPLE
### ------------------------------------------ ###
# Run a security scan on the Terraform code using the Checkov tool.
# Commit the results to the repository.
#
#  checkov-security-scan-example:
#    name: 'Checkov Security Scan - Example'
#    runs-on: ubuntu-latest
#    needs: [checkov-security-scan-module]
#    steps:
#    
#    # Check out the code to the runner environment where the workflow is running
#    - name: Checkout the repository
#      uses: actions/checkout@v3
#      with:
#        ref: main
#    
#    ## Pull any changes down to the working directory      
#    - name: Pull latest changes
#      run: git pull origin main
#
#    # Run a security scan on the Terraform code using the Checkov tool.
#    # Generate a report of security issues that were found.
#    - name: Run Checkov Scan
#      uses: bridgecrewio/checkov-action@master
#      with:
#        file: ./example/main.tf
#        output_format: cli # Report output format
#        output_file_path: './checkov-security-scan/example/' # Name of the output folder to save the chosen output formats
#        framework: terraform # Filter scan to run only on specific infrastructure code frameworks
#        soft_fail: 'true' # Runs checks but always returns a 0 exit code    
#
#     # Strip out ANSI codes from the Checkov scan results
#    - name: Clean Checkov Output
#      run: sed -i 's/\x1b\[[0-9;]*m//g' ./checkov-security-scan/example/results_cli.txt
#
#    # Add the Checkov scan report to the repository and commit it with a commit message.
#    # This action requires authentication, which is provided through GITHUB_TOKEN.
#    - name: Commit the results
#      uses: EndBug/add-and-commit@v9.1.1
#      with:
#        #add: './checkov/checkov-security-scan-*.txt'
#        add: './checkov-security-scan/*'
#        author_name: 'GitHub Action - terraform-module-scanner'
#        message: 'CHECKOV SECURITY SCAN - EXAMPLE'    
#
#    ## Push changes to the main branch.
#    ## Requires authentication, which is provided through a GITHUB_TOKEN 
#    ## environment variable.
#    - name: Push changes to main branch
#      uses: ad-m/github-push-action@master
#      with:
#        branch: main
#        directory: ./
#        github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# Create README.md
### ------------------------------------------ ###
  create-readme:
    name: 'Create Readme'
    runs-on: ubuntu-latest
    needs: [checkov-security-scan-module]
    steps:

    # Check out the code to the runner environment where the workflow is running
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main

    # Check and if not-exist create a README.md file with the specified content
    - name: Check and Create README.md
      run: |
        if [[ ! -f README.md ]]; then
          echo "" > README.md
        fi
    
     # Use the 'terraform-docs' GitHub Action to automatically generate and insert Terraform documentation
     # into the README.md file.
     # Once the documentation is updated, the changes are pushed back to the pull request branch.
    - name: Generate and Update Terraform Documentation in README.md
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        # Specify the configuration file for 'terraform-docs'
        config-file: ./terraform-docs/terraform-docs.yml
        # Enable pushing the updated README.md back to the pull request branch
        git-push: "false"
    
    # Fetch all tags from the remote repository.
    # This ensures that the local repository has an up-to-date list of all tags available in the remote.
    - name: Fetch All Tags from Remote
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      
    # Retrieve the latest tag from the git history.
    # This step uses the 'git describe' command to identify the most recent tag and sets it as an output
    # variable for subsequent steps.
    - name: Retrieve Latest Git Tag
      id: latesttag
      run: echo ::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))

    # Update the README.md file to reflect the latest git tag.
    # This step uses the 'sed' command to search for the badge URL pattern in the README.md and replaces
    # it with the latest tag obtained from the previous step.
    - name: Update Badge in readme with Git Tag
      run: |
        sed -i "s/\(https:\/\/img.shields.io\/badge\/Tag\)-.*-blue/\1-${{ steps.latesttag.outputs.tag }}-blue/" README.md

    # Add the Checkov scan report to the repository and commit it with a commit message.
    # This action requires authentication, which is provided through GITHUB_TOKEN.
    - name: Commit the results
      uses: EndBug/add-and-commit@v9.1.1
      with:
        add: 'README.md'
        author_name: 'GitHub Action - terraform-module-scanner'
        message: 'Resulting from terraform-docs'    
    
    # Push changes to the main branch.
    # Requires authentication, which is provided through a GITHUB_TOKEN 
    # environment variable.
    - name: Push changes to main branch
      uses: ad-m/github-push-action@master
      with:
        branch: main
        directory: ./
        github_token: ${{ env.GITHUB_TOKEN }}

    ## Add the Checkov scan report to the repository and commit it with a commit message.
    ## This action requires authentication, which is provided through GITHUB_TOKEN.
    #- name: Commit the results
    #  uses: EndBug/add-and-commit@v9.1.1
    #  with:
    #    add: 'README.md'
    #    author_name: 'GitHub Action - terraform-module-scanner'
    #    message: 'Resulting from terraform-docs'    
    #
    ## Push changes to the main branch.
    ## Requires authentication, which is provided through a GITHUB_TOKEN 
    ## environment variable.
    #- name: Push changes to main branch
    #  uses: ad-m/github-push-action@master
    #  with:
    #    branch: main
    #    directory: ./
    #    github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# TERRAFORM-DOCS
### ------------------------------------------ ###
# Automatically generate and update documentation for Terraform
# modules in the README.md file, and push the changes back to 
# the pull request branch in GitHub.

  #terraform-docs:
  #  name: 'Terraform Docs'
  #  runs-on: ubuntu-latest
  #  env:
  #  # Provide the GitHub token to allow access to repository-related functionalities.
  #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #  needs: create-readme
  #  
  #  steps:
  #  
  #  # Check out the code to the runner environment where the workflow is running
  #  - name: Checkout the repository
  #    uses: actions/checkout@v3
  #    with:
  #      ref: main
#
  #  # Pull any changes down to the working directory      
  #  - name: Pull latest changes
  #    run: git pull origin main
#
  #   # Use the 'terraform-docs' GitHub Action to automatically generate and insert Terraform documentation
  #   # into the README.md file.
  #   # Once the documentation is updated, the changes are pushed back to the pull request branch.
  #  - name: Generate and Update Terraform Documentation in README.md
  #    uses: terraform-docs/gh-actions@v1.0.0
  #    with:
  #      # Specify the configuration file for 'terraform-docs'
  #      config-file: ./terraform-docs/terraform-docs.yml
  #      # Enable pushing the updated README.md back to the pull request branch
  #      git-push: "true"

### ------------------------------------------ ###
# Readme badges
### ------------------------------------------ ###
# Automatically generate and update documentation for Terraform
# modules in the README.md file, and push the changes back to 
# the pull request branch in GitHub.

#  readme-badges:
#      name: 'Readme Badges'
#      runs-on: ubuntu-latest
#      env:
#      # Provide the GitHub token to allow access to repository-related functionalities.
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      #needs: terraform-docs
#      needs: [create-readme]
#      steps:
#    
#      # Check out the code to the runner environment where the workflow is running
#      - name: Checkout the repository
#        uses: actions/checkout@v3
#        with:
#          ref: main
#
#      # Pull any changes down to the working directory      
#      - name: Pull latest changes
#        run: git pull origin main
#
#    
#      # Fetch all tags from the remote repository.
#      # This ensures that the local repository has an up-to-date list of all tags available in the remote.
#      - name: Fetch All Tags from Remote
#        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
#      
#      # Retrieve the latest tag from the git history.
#      # This step uses the 'git describe' command to identify the most recent tag and sets it as an output
#      # variable for subsequent steps.
#      - name: Retrieve Latest Git Tag
#        id: latesttag
#        run: echo ::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))
#
#      # Update the README.md file to reflect the latest git tag.
#      # This step uses the 'sed' command to search for the badge URL pattern in the README.md and replaces
#      # it with the latest tag obtained from the previous step.
#      - name: Update Badge in readme with Git Tag
#        run: |
#          sed -i "s/\(https:\/\/img.shields.io\/badge\/Tag\)-.*-blue/\1-${{ steps.latesttag.outputs.tag }}-blue/" README.md
#
#      # Add the Checkov scan report to the repository and commit it with a commit message.
#      # This action requires authentication, which is provided through GITHUB_TOKEN.
#      - name: Commit the results
#        uses: EndBug/add-and-commit@v9.1.1
#        with:
#          add: 'README.md'
#          author_name: 'GitHub Action - terraform-module-scanner'
#          message: 'Resulting from terraform-docs'    
#    
#      # Push changes to the main branch.
#      # Requires authentication, which is provided through a GITHUB_TOKEN 
#      # environment variable.
#      - name: Push changes to main branch
#        uses: ad-m/github-push-action@master
#        with:
#          branch: main
#          directory: ./
#          github_token: ${{ env.GITHUB_TOKEN }}

### ------------------------------------------ ###
# NOTIFY SLACK
### ------------------------------------------ ###

  # Job to notify a Slack channel in case of any failure in the specified jobs.
  notify-slack-on-failure:
    name: 'Notify Slack on Any Failure'
    runs-on: ubuntu-latest
    
    # This job will only execute if any of the specified jobs fail.
    if: failure()
    
    # Dependencies: This job depends on the completion of the following jobs.
    #needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, checkov-security-scan-example, create-readme, terraform-docs, readme-badges]
    #needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, checkov-security-scan-example, create-readme, readme-badges]
    #needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, checkov-security-scan-example, create-readme]
    needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, create-readme]
    
    steps:
    - name: Send Failure Notification to Slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ env.SLACK_CHANNEL_ID }}
        payload: |
          {
            "text": ":boom: Error in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }} \n\n:clipboard:Check the GitHub Action logs for detailed results",
            
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":boom: Error in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }} \n\n:clipboard:Check the GitHub Action logs for detailed results"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":github: View Action"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        # Slack webhook URL for sending notifications.
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
        
        # Specify the type of Slack webhook being used.
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # Job to notify a Slack channel in case of any failure in the specified jobs.
  notify-slack-on-success:
    name: 'Notify Slack on Total Success'
    runs-on: ubuntu-latest
    
    # This job will only execute if any of the specified jobs fail.
    if: success()
    
    # Dependencies: This job depends on the completion of the following jobs.
    #needs: [terraform-fmt-validate, tflint, checkov-security-scan, create-readme, terraform-docs, readme-badges]
    #needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, checkov-security-scan-example, create-readme, terraform-docs, readme-badges]
    #needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, checkov-security-scan-example, create-readme, readme-badges]
    #needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, checkov-security-scan-example, create-readme]
    needs: [terraform-fmt-validate, tflint,checkov-security-scan-module, create-readme]
    
    steps:
    - name: Send Success Notification to Slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ env.SLACK_CHANNEL_ID }}
        payload: |
          {
            "text": ":white_check_mark: Success in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }}",

            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":white_check_mark: Success in workflow: ${{ github.workflow }} \n\n:file_folder: Repository: ${{ github.repository }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": ":github: View Action"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        # Slack webhook URL for sending notifications.
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
        
        # Specify the type of Slack webhook being used.
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

